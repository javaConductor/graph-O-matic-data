/**
 * Created with JetBrains WebStorm.
 * User: lee
 * Date: 6/20/13
 * Time: 1:58 PM
 */

(function (mongoose) {

	// Database
	var connection = mongoose.connect('mongodb://localhost/graph-o-matic');

	var Schema = mongoose.Schema;
	var ObjectId = mongoose.Schema.Types.ObjectId;
	var itemData = new Schema({
		name: { type: String, unique: true, required: true },
		value: { type: String, required: true },
		type: { type: String }
	});

	var schemas = [];

	var durationDates = new Schema({
		start: Date,
		end: Date
	});

	var originSchema = new Schema({
		context: String,
		area: String,
		vendor: String,
		version: String
	});

	var RelationshipCategorySchema = new Schema({
		name: {type:String, unique: true},
		parent: {type: ObjectId, ref: 'RelationshipTypeCategory'}
		,origin :[originSchema]
	});
	RelationshipCategorySchema.methods.nameMap = function (cb) {
		return this.model('RelationshipTypeCategory').find({ }, function(err, rtypes){
			if(err)
				return cb( err, null );
			var m = {};
			rtypes.forEach( function(rtype){
				m[rtype.name] = rtype;
			});
			cb(null, m);
		});
	}
	schemas.push(RelationshipCategorySchema);

	var ItemTypeCategorySchema = new Schema({
		//	id: { type: ObjectId, required: true },
		name: {type:String},
		parent: {type: ObjectId, ref: 'ItemTypeCategory'}
		,origin : [originSchema]
	});
	ItemTypeCategorySchema.methods.nameMap = function (cb) {
		return this.model('ItemTypeCategory').find({ }, function(err, rtypes){
			if( err )
				return cb( err, null );
			var m = {};
			rtypes.forEach( function(rtype){
				m[rtype.name] = rtype;
			});
			cb(null, m);
		});
	};
	schemas.push(ItemTypeCategorySchema);

	var constraintSchema = new Schema({
		To: [
			{ref: 'ItemType', type: ObjectId  }
		],
		From: [
			{ref: 'ItemType', type: ObjectId  }
		],
		ToExpression: String,
		FromExpression: String,
		FromToExpression: String
	});

	var RelationshipTypeSchema = new Schema({
		//	id: { type: ObjectId, unique:true, required: true },
		name: {type: String, required: true},
		composite: Boolean,
		bidirectional: Boolean,
		reciprocalRelationship: [{type: ObjectId, ref: 'RelationshipType' }],
		parent:[ {type: ObjectId, ref: 'RelationshipType'}],
		category: {type: ObjectId, ref: 'RelationshipTypeCategory' },
		temporal: Boolean,
		constraints: {
			To: [
				{ref: 'ItemType', type: ObjectId }
			],
			From: [
				{ref: 'ItemType', type: ObjectId }
			],
			ToExpression: String,
			FromExpression: String,
			FromToExpression: String
		},
		origin : [originSchema]
	});
//	RelationshipTypeSchema.path('name').validate(function (v) {
//		return v.length > 5;
//	}, 'my error type');

	RelationshipTypeSchema.methods.nameMap = function (cb) {
		return this.model('RelationshipType').find({ }, function(err, rtypes){
			if(err)
				return cb( err, null );
			var m = {};
			rtypes.forEach( function(rtype){
				m[rtype.name] = rtype;
			});
			cb(null, m);
		});
	}
	schemas.push(RelationshipTypeSchema);

	var RelationshipSchema = new Schema({
		type: { type: ObjectId, ref: 'RelationshipType', required: true},
		data: {
			name: { type: String, unique: true, required: true },
			value: { type: String, required: true },
			type: { type: String }
		},
		active: { type: Boolean, required: true },
		fromItem: { type: String, required: true },
		toItem: { type: String, required: true },
		durations: {
			start: Date,
			end: Date
		},
		notes: {
			date: {type: String, required: true},
			note: String
		},
		origin : [originSchema]
	});
	RelationshipSchema.index({"name":1, "origin.context": 1, "origin.area": 1}, {unique: true});

	schemas.push(RelationshipSchema);

	var propertiesSchema = new Schema(
		{
			name: {"required": true, "type":String},
			simpleProperty: {"required": true, "type":"boolean", "default":true},
			required: Boolean,

			// THIS
			type: { type:String, enum: ["number", "text", "boolean", "date", "email", "currency", "map", "url" ]},

			//OR THIS
			itemType:[
				{ref: "ItemType", type: ObjectId}],

			description: { type: String, required: false }
		});


	var ItemTypeSchema = new Schema({
		name: { type: String, required: true },
		title: { type: String, required: false },
		description: { type: String, required: false },
		parent: [{type: ObjectId, ref: 'ItemType'}],
		category: {type: ObjectId, ref: 'ItemTypeCategory' },
		properties: [propertiesSchema],
		defaults: [
			{
				name: { type: String, required: true },
				value: { type: String, required: true },
				fixed: Boolean
			}
		],
		allowExtraProperties: Boolean,
		origin : [originSchema]
	});

	ItemTypeSchema.index({"name":1, "origin.context": 1, "origin.area": 1}, {unique: true});
	ItemTypeSchema.set('versionKey', false);
	schemas.push(ItemTypeSchema);

	var ItemSchema = new Schema({
		type: { type: ObjectId, ref: 'ItemType' },
		title: { type: String, required: false },
		description: { type: String },
		relatedImages: [
			{ type: String }
		],
		relationships: [
			{ type: ObjectId, ref: 'Relationship' }
		], /// ids only
		data: [itemData],
		origin : [originSchema]
	});
	schemas.push(ItemSchema);

	var ViewItemSchema = new Schema({
		item: { type: ObjectId, ref: 'Item', required: true },
		position: {
			x: Number,
			y: Number
		},
		selected: Boolean,
		origin : [originSchema]
	});
	schemas.push(ViewItemSchema);

	var ViewTypeSchema = new Schema({
		name: String,
		itemTemplateURL: String,
		relationshipTemplateURL: String,
		cssFiles: [String],
		title: String,
		origin : {}
	});
	schemas.push(ViewTypeSchema);

	var ViewSchema = new Schema({
		name: {type: String, required: true},
		type: {ref: 'ViewType', type: ObjectId, required: true},
		items: [
			{ type: ObjectId, ref: 'ViewItem', required: true }
		]
	});
	schemas.push(ViewSchema);

	var ContextSchema = new Schema({
		name: {type: String, required: true},
		area: {type: String, required: true},
		types: [String]
	});

	ContextSchema.index({name: 1, area: 1}, {unique: true});
	schemas.push(ViewSchema);

	schemas.forEach(function (s) {
//		s.virtual('id').get(function () {
//			return this._id;
//		});
//		s.virtual('id').set(function (id) {
//			this._id = id;
//		});
	});

	/// MODELS
	this.ItemTypeCategory = connection.model('ItemTypeCategory', ItemTypeCategorySchema);
	this.ItemType = connection.model('ItemType', ItemTypeSchema);
	this.Item = connection.model('Item', ItemSchema);
	this.RelationshipTypeCategory = connection.model('RelationshipTypeCategory', RelationshipCategorySchema);
	this.Relationship = connection.model('Relationship', RelationshipSchema);
	this.RelationshipType = connection.model('RelationshipType', RelationshipTypeSchema);
	this.ViewType = connection.model('ViewType', ViewTypeSchema);
	this.View = connection.model('View', ViewSchema);
	this.ViewItem = connection.model('ViewItem', ViewItemSchema);
	this.Contexts = connection.model('Contexts', ContextSchema);

	/////////// EXPORTS ////////////
	/////////// EXPORTS ////////////
	exports.ItemTypeCategory = this.ItemTypeCategory;
	exports.ItemType = this.ItemType;
	exports.Item = this.Item;
	exports.RelationshipTypeCategory = this.RelationshipTypeCategory;
	exports.Relationship = this.Relationship;
	exports.RelationshipType = this.RelationshipType;
	exports.ViewType = this.ViewType;
	exports.View = this.View;
	exports.ViewItem = this.ViewItem;
	exports.Contexts = this.Contexts;
	exports.ObjectId = mongoose.Types.ObjectId;

})(require("mongoose"));
