/**
 * Created with JetBrains WebStorm.
 * User: lee
 * Date: 6/20/13
 * Time: 1:58 PM
 */

(function (mongoose) {

	// Database
	var connection = mongoose.connect('mongodb://localhost/graph-o-matic');

	var Schema = mongoose.Schema;
	var ObjectId = mongoose.Schema.Types.ObjectId;
	var itemData = new Schema({
		name: { type: String,  required: true },
		value: { type: String, required: true },
		type: { type: String }
	});

	var schemas = [];

	var durationDates = new Schema({
		start: Date,
		end: Date
	});

	var originSchema = new Schema({
		context: String,
		area: String,
		vendor: String,
		version: String
	});
    var optionsSchema = new Schema({
        itemLimit: { type:Number, required:false},
        filters:{ type:Object, required:false}
    });

	var CategorySchema = new Schema({
		name: {type:String, unique: true},
		parentName: {type: String}
		,_origin :[originSchema]
	});

	schemas.push(CategorySchema);

	var constraintSchema = new Schema({
		To: [
			{type: String  }// itemType
		],
		From: [
			{ type: String  }// itemType
		],
		ToExpression: String,
		FromExpression: String,
		FromToExpression: String
	});

	var RelationshipTypeSchema = new Schema({
		name: {type: String, required: true},
		composite: Boolean,
		bidirectional: Boolean,
		reciprocalRelationship: {type: String },
		parentName: {type: String},
		category: {type: String },
		temporal: Boolean,
		constraints: {
			To: [
				{ type: String }
			],
			From: [
                { type: String }
            ],
			ToExpression: String,
			FromExpression: String,
			FromToExpression: String
		},
		_origin : [originSchema]
	});
    RelationshipTypeSchema.index({"name":1, "origin.context": 1, "origin.area": 1}, {unique: true});

	schemas.push(RelationshipTypeSchema);

	var RelationshipSchema = new Schema({
        typeName: {type: String, required: true},
		type: { type: ObjectId, ref: 'RelationshipType', required: false},
		data: {
			name: { type: String, unique: true, required: true },
			value: { type: String, required: true },
			type: { type: String }
		},
		active: { type: Boolean, required: true },
		fromItem: { type: String, required: true },
		toItem: { type: String, required: true },
		durations: {
			start: Date,
			end: Date
		},
		notes: {
			date: {type: String, required: true},
			note: String
		},
		origin : [originSchema]
	});
	RelationshipSchema.index({"typeName":1}, {unique: true});

	schemas.push(RelationshipSchema);

	var propertiesSchema = new Schema(
		{
			name: {"required": true, "type":String},
			simpleProperty: {"required": true, "type":"boolean", "default":true},
			required: Boolean,

			// THIS
			type: { type:String, enum: ["number", "text", "boolean", "date", "email", "currency", "map", "url", "atLeastOneOf","oneOf", "oneOrMoreOf" ]},

			//OR THIS
			itemType:{type: String},//ItemType

			description: { type: String, required: false },
            derived: Boolean
		});

	var ItemTypeSchema = new Schema({
		name: { type: String, required: true },
		title: { type: String, required: false },
		description: { type: String, required: false },
		parentName: {type: String},
		category: {type: String },
		properties: [propertiesSchema],
		defaults: [
			{
				name: { type: String, required: true },
				value: { type: String, required: true },
				fixed: Boolean
			}
		],
		allowExtraProperties: Boolean,
		_origin : [originSchema]
	});

	ItemTypeSchema.index({"name":1, "origin.context": 1, "origin.area": 1}, {unique: true});
	ItemTypeSchema.set('versionKey', false);
	schemas.push(ItemTypeSchema);

	var ItemSchema = new Schema({
		typeName: { type:String, required: true },// full name: context.area.name
		type: { type: ObjectId, ref: 'ItemType', required: false },
		title: { type: String, required: true },
		description: { type: String },
		relatedImages: [
			{ type: String }
		],
		relationships: [
			{ type: ObjectId, ref: 'Relationship' }
		], /// ids only
		data: [{
            name: { type: String, required: true },
            value: { type: String, required: true },
            type: { type: String }
        }]
		//_origin : [originSchema]
	});
	schemas.push(ItemSchema);

	var ViewItemSchema = new Schema({
		item: { type: ObjectId, ref: 'Item', required: true },
		position: {
			x: Number,
			y: Number
		},
		selected: Boolean
		//_origin : [originSchema]
	});
    ViewItemSchema.index({"name":1, "origin.context": 1, "origin.area": 1}, {unique: true});
	schemas.push(ViewItemSchema);

	var ContextSchema = new Schema({
		name: {type: String, required: true},
		area: {type: String, required: true},
		types: [String]
	});
	ContextSchema.index({name: 1, area: 1}, {unique: true});
	schemas.push(ContextSchema);

    var ViewTypeSchema = new Schema({
        name: String,
        itemTemplateURL: String,
        relationshipTemplateURL: String,
        cssFiles: [String],
        title: String,
        _origin : [originSchema]
    });
    schemas.push(ViewTypeSchema);

    var ViewSchema = new Schema({
        name: {type: String, required: true},
        typeName: {type: String, required: true},
        type: {ref: 'ViewType', type: ObjectId, required: false},
        items: [
            { type: ObjectId, ref: 'ViewItem', required: true }
        ],
        viewOptions:[optionsSchema]
    });
    schemas.push(ViewSchema);

	/// MODELS
	this.Category = connection.model('Category', CategorySchema);
	this.ItemType = connection.model('ItemType', ItemTypeSchema);
	this.Item = connection.model('Item', ItemSchema);
	this.Relationship = connection.model('Relationship', RelationshipSchema);
	this.RelationshipType = connection.model('RelationshipType', RelationshipTypeSchema);
	this.ViewType = connection.model('ViewType', ViewTypeSchema);
	this.View = connection.model('View', ViewSchema);
	this.ViewItem = connection.model('ViewItem', ViewItemSchema);
	this.Contexts = connection.model('Contexts', ContextSchema);

	/////////// EXPORTS ////////////
	/////////// EXPORTS ////////////
	exports.Category = this.Category;
	exports.ItemType = this.ItemType;
	exports.Item = this.Item;
	exports.Relationship = this.Relationship;
	exports.RelationshipType = this.RelationshipType;
	exports.ViewType = this.ViewType;
	exports.View = this.View;
	exports.ViewItem = this.ViewItem;
	exports.Contexts = this.Contexts;
	exports.ObjectId = mongoose.Types.ObjectId;

})(require("mongoose"));
