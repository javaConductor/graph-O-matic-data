/**
 * Created with JetBrains WebStorm.
 * User: lee
 * Date: 6/20/13
 * Time: 1:58 PM
 */

(function (wu, mongoose, model, extend, logger) {
    //console.dir(["mongoAdapter/index.js: model:",model]);

    var beforeSaveDefault = function (x) {
        x = x || {};
        if (x && x.id)
            x._id = x.id;
        return x;
    };
    var afterReadDefault = function (x) {
        x = x ? x.toObject() : {};
        x.id = x._id;
        return x;
    };

    var afterReadType = function(x){
        x.origin = x._origin[0];
        return x;
    };
    var beforeSaveType = function(x){
        if(x)
            x._origin = [x.origin];
        return x;
    };
    var identity = function (x) {
        return x;
    };

    var beforeSave = {
        view: function (v) {
            if (v.options)
                v.viewOptions = v.options;
            return  beforeSaveDefault(v);
        },
        item: beforeSaveDefault,
        viewItem: identity,
        relationship:  beforeSaveDefault,

        category: wu.compose( beforeSaveType,beforeSaveDefault),
        itemType: wu.compose( beforeSaveType,beforeSaveDefault),
        relationshipType: wu.compose(  beforeSaveType,beforeSaveDefault),
        viewType: wu.compose(  beforeSaveType,beforeSaveDefault),

        context: identity,
        "*": identity
    };
    var afterRead = {
        view: identity,
        item:(afterReadDefault),
        viewItem: identity,
        relationship: afterReadDefault,
        category: wu.compose( afterReadType, afterReadDefault),
        itemType:  wu.compose( afterReadType, afterReadDefault),
        relationshipType:  wu.compose(afterReadType, afterReadDefault),
        viewType:  wu.compose( afterReadType, afterReadDefault),

        context: identity,
        "*": identity
    };

    this.debug = function (txt) {
        txt = txt || "";
        logger.debug("Debug: " + txt);
    };
    this.log = logger.debug;
    this.error = logger.error;

    var self = this;
    this.callbackWithReport = function (label, f) {
        return function (err, data) {
            if (err) {
                logger.error(
                    "\nCall to " + label + " returned error >>\n" + JSON.stringify(err, null, '    \n')
                );
            }
            else
                logger.debug(
                    "\nCall to " + label + " returned >>\n" +
                        JSON.stringify(data, null, '\t')
                );
            if(f)
                f(err, data);
            //self.log("");
        }
    };

    //////  Category //////
    //////  Category //////
    this.saveCategory = function (rcat, f) {
        f = callbackWithReport("mongoAdapter.saveCategory(" + JSON.stringify(rcat) + ")", f);
        rcat = beforeSave.category(rcat);
        logger.debug("mongoAdapter.saveCategory(" + rcat + ")");
        var relCat = new model.Category(rcat);
        relCat.save(function (err, cat) {
            return  (err) ? f(err) : f(null, afterRead.category(cat));
        });
    };

    this.getCategories = function (f) {
        f = callbackWithReport("mongoAdapter.getCategories()", f);
        model.getCategories
            .find({})
            .exec(function (err, cats) {
                return  (err) ? f(err) : f(null, cats.map(afterRead.category));
            });
    };

    ////////  Relationship Type ////////
    ////////  Relationship Type ////////
    this.saveRelationshipType = function (rtype, f) {
        f = callbackWithReport("mongoAdapter.saveRelationshipType(" + JSON.stringify(rtype) + ")", f);
        rtype = beforeSave.relationshipType(rtype);
        var relType = new model.RelationshipType(rtype);
        relType.save(function (e, rt) {
            return (e) ? f(e) : f(null, afterRead.relationshipType(rt));
        });
    };

    this.updateRelationshipType = function (rtype, f) {
        f = callbackWithReport("mongoAdapter.updateRelationshipType(" + JSON.stringify(rtype) + ")", f);
        logger.debug("mongoAdapter.updateRelationshipType(" + JSON.stringify(rtype) + ")");
        rtype = beforeSave.relationshipType(rtype);
        var o = rtype.toObject();
        delete o['_id'];
        //o = extend({}, o);rtype.save(f)
        model.RelationshipType.findOneAndUpdate({ _id: rtype._id }, o, {new: false})
            //.populate('parent')
            .exec(function (err, rt) {
                // console.dir(["updateRelationshipType(): Error: >>", err ? JSON.stringify(err) : "NONE"]);
                return (err) ? f(err) : f(null, afterRead.relationshipType(rt));
            });
    };

    this.getRelationshipTypeById = function (rtypeId, f) {
        f = callbackWithReport("mongoAdapter.getRelationshipTypeById(" + JSON.stringify(rtypeId) + ")", f);
        var rt = model.RelationshipType.findOne({id: rtypeId})
            //.populate('parent')
            //.populate('category')
            //.populate('reciprocalRelationship')
            .exec(function (err, rtype) {
                return  (err) ? f(err) : f(null, afterRead.relationshipType(rtype));
            })
    };

    this.getRelationshipType = function (context, area, name, f) {
        f = callbackWithReport("mongoAdapter.getRelationshipType(" + context + "." + area + "." + name + ")", f);
        var rt = model.RelationshipType.findOne({name: name, 'origin.context': context, 'origin.area': area})
            //.populate('parent')
            //.populate('category')
            //.populate('reciprocalRelationship')
            .exec(function (err, rtype) {
                return  (err) ? f(err) : f(null, afterRead.relationshipType(rtype));
            })
    };

    this.getRelationshipTypes = function (f) {
        f = callbackWithReport("mongoAdapter.getRelationshipTypes()", f);
        var rt = model.RelationshipType.find({})
            //.populate('parent')
            //.populate('category')
            //.populate('reciprocalRelationship')
            .exec(function (err, rtypes) {
                return  (err) ? f(err) : f(null, rtypes.map(afterRead.relationshipType));
            })
    };

    //////  Category //////
    //////  Category //////
    this.saveCategory = function (icat, f) {
        f = callbackWithReport("mongoAdapter.saveCategory(" + JSON.stringify(icat) + ")", f);
        icat = beforeSave.category(icat);
        var cat = new model.Category(icat);
        cat.save(function (err, saved) {
            err ? f(err) : f(null, afterRead.category(saved));
        });
    };

    this.getCategory = function (icatId, f) {
        f = callbackWithReport("mongoAdapter.getCategory(" + icatId.toString() + ")", f);
        if (!icatId)
            return f("No ID.", null);
        model.Category
            .findOne({_id: (icatId)})
            .exec(function (err, iCat) {
                return  (err) ? f(err) : f(null, afterRead.category(iCat));
            });
    };

    this.getCategories = function (f) {
        f = callbackWithReport("mongoAdapter.getCategories()", f);
        model.Category
            .find({})
            .exec(function (err, iCats) {
                return  (err) ? f(err) : f(null, iCats.map(afterRead.category));
            });
    };

    ////// ViewType  //////
    //////  ViewType  //////
    this.saveViewType = function (it, f) {
        f = callbackWithReport("mongoAdapter.saveViewType(" + JSON.stringify(it) + ")", f);
        var viewType = new model.ViewType(beforeSave.viewType(it));
        viewType.save(function (err, saved) {
                return (err) ?  f(err) : f(null, afterRead.viewType(saved));
        });
    };

    this.getViewType = function (vtypeId, f) {
        f = callbackWithReport("mongoAdapter.getViewType(" + vtypeId.toString() + ")", f);
        model.Item.findOne({id: vtypeId})
            .exec(function (err, vt) {
                return (err) ? f(err) : f(null, afterRead.viewType(vt));
            });
    };

    this.getViewTypes = function (f) {
        f = callbackWithReport("mongoAdapter.getViewTypes()", f);
        model.ViewType.find({})
            .exec(function (err, saved) {
                console.dir(['getViewTypes saved:',saved]);
                return (err) ? f(err) : f(null, (saved || []).map(afterRead.viewType));
            });
    };

    //////  ItemType  //////
    //////  ItemType  //////
    this.saveItemType = function (it, f) {
        f = callbackWithReport("mongoAdapter.saveItemType(" + JSON.stringify(it) + ")", f);
        logger.debug("mongoAdapter.saveCategory(" + JSON.stringify(it) + ")");
        it = beforeSave.itemType(it);
        var itemType = new model.ItemType(it);
        itemType.save(function (err, saved) {
            return (err) ? f(err) : f(null, afterRead.itemType(saved));
        });
    };

    this.updateItemType = function (itype, f) {
        f = callbackWithReport("mongoAdapter.updateItemType(" + JSON.stringify(itype) + ")", f);
        logger.debug("mongoAdapter.updateItemType(" + JSON.stringify(itype) + ")");
        itype = beforeSave.itemType(itype);
        return itype.save(function (err, saved) {
            return (err) ? f(err) : f(null, afterRead.itemType(saved));
        });
    };

    this.getItemTypeById = function (itypeId, f) {
        f = callbackWithReport("mongoAdapter.getItemTypeById(" + itypeId.toString() + ")", f);
        logger.debug("mongoAdapter.getItemTypeById(" + itypeId + ")");
        model.ItemType.findOne({_id: ( itypeId)})
           // .populate('category')
            //.populate('properties.itemTypes')
            //.populate('properties.relationshipTypes')
            .exec(function (err, it) {
                return (err) ? f(err) : f(null, afterRead.itemType(it));
            });
    };

    this.getItemType = function (context, area, name, f) {
        f = callbackWithReport("mongoAdapter.getItemType(" + context + "." + area + "." + name + ")", f);
        logger.debug("mongoAdapter.getItemType(" + context + "." + area + "." + name + ")");
        model.ItemType.findOne({'origin.context': context, 'origin.area': area, name: name})
//            .populate('category')
//            .populate('parent')
//            .populate('properties.itemTypes')
//            .populate('properties.relationshipTypes')
            .exec(function (err, itype) {
                (err) ? f(err) : f(null, afterRead.itemType(itype));
            });
    };

    this.getItemTypeByName = function (fullTypeName, f) {
        f = callbackWithReport("mongoAdapter.getItemTypeByName(" + fullTypeName + ")", f);
        logger.debug("mongoAdapter.getItemTypeByName(" + fullTypeName + ")");
        var parts = fullTypeName.split(".", 3);
        var context, area, name;
        if (parts.length == 3) {
            context = parts[0];
            area = parts[1];
            name = parts[2];
        } else {
            context = "default";
            area = "common";
            name = fullTypeName;
        }
        this.getItemType(context, area, name, f);
    };

    this.getItemTypes = function (f) {
        f = callbackWithReport("mongoAdapter.getItemTypes()", f);
        logger.debug("mongoAdapter.getItemTypes()");
        model.ItemType.find({})
          //  .populate('category')
            .exec(function (err, itypes) {
                (err) ? f(err) : f(null, itypes.map(afterRead.itemType));
            });
    };

    //////  Item  //////
    //////  Item  //////
    this.saveItem = function (itm, f) {
        f = callbackWithReport("mongoAdapter.saveItem(" + JSON.stringify(itm) + ")", f);
        itm = beforeSave.item(itm);
        var item = new model.Item(itm);
        item.save(function (err, itm) {
            (err) ? f(err) : f(null, afterRead.item(itm));
        });
    };

    this.getItem = function (itemId, f) {
        f = callbackWithReport("mongoAdapter.getItem(" + itemId.toString() + ")", f);
        model.Item.findOne({id: itemId})
            //.populate('type')
            .populate('relationships')
            .exec(function (err, itm) {
                (err) ? f(err) : f(null, afterRead.item(itm));
            });
    };

    this.getItems = function ( f) {
        f = callbackWithReport("mongoAdapter.getItems()", f);
        model.Item.find({})
            //.populate('type')
            .populate('relationships')
            .exec(function (err, itms) {
                (err) ? f(err) : f(null, itms.map(afterRead.item));
            });
    };
    this.deleteItem = function (itemId, f) {
        f = callbackWithReport("mongoAdapter.deleteItem(" + itemId.toString() + ")", f);
        model.Item.findOne({id: itemId}).remove(f);
    };

    /*
     */

    function createQueryObject(searchText, searchOptions) {

        // TODO: Must add code to create the qry object for the
        // TODO: searchText and options
    }

    this.findItems = function (searchText, searchOptions, f) {
        f = callbackWithReport("mongoAdapter.findItems(" + searchText + ", " + (JSON.stringify(searchOptions)) + ")", f);
        var qry = createQueryObject(searchText, searchOptions);
        model.Item.find(qry)
            //.populate('type')
            .populate('relationships')
            .exec(function (err, items) {
                (err) ? f(err) : f(null, items.map(afterRead.itemType));
            });
    };

    //////  ViewItem  //////
    //////  ViewItem  //////
    this.getViewItem = function (vitemId, f) {
        f = callbackWithReport("mongoAdapter.getViewItem(" + vitemId.toString() + ")", f);
        var vi = model.ViewItem.findOne({id: vitemId})
            .populate('item')
            .exec(function (err, vitem) {
                return  (err) ? f(err) : f(null, afterRead.viewItem(vitem));
            });
    };

    this.saveViewItem = function (vi, f) {
        f = callbackWithReport("mongoAdapter.saveViewItem(" + JSON.stringify(vi) + ")", f);
        vi = beforeSave.viewItem(vi);
        var vitem = new model.ViewItem(vi);
        vitem.save(function (err, vitem) {
            return  (err) ? f(err) : f(null, afterRead.viewItem(vitem));
        });
    };

    this.createViewItem = function (viewId, itemId, x, y, f) {
        f = callbackWithReport("mongoAdapter.createViewItem(" + viewId + "," + itemId + "," + x + "," + y + ")", f);
        this.getItem(itemId, function (e, i) {
            var vi = {
                viewId: viewId,
                item: i,
                position: { x: x, y: y}
            };

            var vitem = new model.ViewItem(vi);
            vitem.save(function (err, vi) {
                return  (err) ? f(err) : f(null, afterRead.viewItem(vi));
            });
        });


    };

    this.updateViewItemPosition = function (vitemId, x, y, f) {
        f = callbackWithReport("mongoAdapter.updateViewItemPosition(" + vitemId.toString() + "," + x + "," + y + ")");
        getViewItem(vitemId, function (err, vitem) {
            if (err)
                return f(err);
            vitem.position.x = x;
            vitem.position.y = y;
            return self.saveViewItem(vitem, function (err, vi) {
                return  (err) ? f(err) : f(null, (vi));
            });
        })

    };

    //////  Context  //////
    //////  Context  //////
    this.getContext = function (context, area, f) {
        f = callbackWithReport("mongoAdapter.getContext(" + context + "," + area + ")", f);
        try {
            model.Contexts.findOne({name: context, area: area})
                .exec(function (err, ctxt) {
                    (err) ? f(err) : f(null, afterRead.context(ctxt));
                })
        }
        catch (e) {
            console.log("getContext: Error: " + e);
        }
    };

    this.saveContext = function (context, area, types, f) {
        f = callbackWithReport("mongoAdapter.saveContext(" + context + "," + area + "," + JSON.stringify(types) + ")", f);
        var ctxt = new model.Contexts({name: context, area: area, types: types });
        ctxt.save(function (err, c) {
            return  (err) ? f(err) : f(null, afterRead.context(c));
        });
    };

    //////  View  //////
    //////  View  //////
    this.getView = function (viewId, f) {
        f = callbackWithReport("mongoAdapter.getView(" + viewId + ")", f);
        logger.debug("mongoAdapter.getView(" + viewId + ")");
        model.View.findOne({id: viewId})
            .populate('items')
            .populate('items.item')
            .exec(function (err, view) {
                if (err)
                    return f(err);
                return   f(null, afterRead.view(view));
            });
    };

    this.getViews = function (f) {
        f = callbackWithReport("mongoAdapter.getViews()", f);
        logger.debug("mongoAdapter.getViews()");
        return model.View.find({})
            .populate('items')
            .populate('items.item')
            .exec(function (err, views) {
                if (err)
                    return f(err);
                return   f(null, views.map(afterRead.view));
            });
    };

    this.saveView = function (view, f) {
        f = callbackWithReport("mongoAdapter.saveView(" + JSON.stringify(view) + ")", f);
        logger.debug("mongoAdapter.saveView(" + JSON.stringify(view) + ")");
        var o = new model.View(beforeSave.view(view));
        o.save(function (err, v) {
            if (err)
                return f(err);
            return   f(null, afterRead.view(v));
        });
    };

    this.updateView = function (view, f) {
        f = callbackWithReport("mongoAdapter.updateView(" + JSON.stringify(view) + ")", f);
        logger.debug("mongoAdapter.updateView(" + JSON.stringify(view) + ")");
        var o = new model.View(beforeSave.view(view));
        o.save(function (err, v) {
            if (err)
                return f(err);
            return   f(null, afterRead.view(v));
        });
    };

    /////////// EXPORTS ////////////
    /////////// EXPORTS ////////////

    exports.saveCategory = this.saveCategory;
    exports.getCategory = this.getCategory;
    exports.getCategories = this.getCategories;

    exports.saveRelationshipType = this.saveRelationshipType;
    exports.updateRelationshipType = this.updateRelationshipType;
    exports.getRelationshipType = this.getRelationshipType;
    exports.getRelationshipTypes = this.getRelationshipTypes;
    exports.getRelationshipTypeById = this.getRelationshipTypeById;

    exports.saveRelationship = this.saveRelationship;
    exports.getRelationship = this.getRelationship;

    exports.saveItemType = this.saveItemType;
    exports.getItemType = this.getItemType;
    exports.updateItemType = this.updateItemType;
    exports.getItemTypes = this.getItemTypes;
    exports.getItemTypeById = this.getItemTypeById;
    exports.getItemTypeByName = this.getItemTypeByName;

    exports.saveItem = this.saveItem;
    exports.getItems = this.getItems;
    exports.getItem = this.getItem;
    exports.deleteItem = this.deleteItem;

    exports.saveViewItem = this.saveViewItem;
    exports.getViewItem = this.getViewItem;
    exports.updateViewItemPosition = this.updateViewItemPosition;

    exports.saveView = this.saveView;
    exports.getView = this.getView;
    exports.getViews = this.getViews;
    exports.updateView = this.updateView;

    exports.saveViewType = this.saveViewType;
    exports.getViewType = this.getViewType;
    exports.getViewTypes = this.getViewTypes;

    exports.getContext = this.getContext;
    exports.saveContext = this.saveContext;

})(require('wu').wu, require('mongoose'),
        require("./model.js"), require("xtend"),
        require('./logger.js'));
