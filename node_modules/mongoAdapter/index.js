/**
 * Created with JetBrains WebStorm.
 * User: lee
 * Date: 6/20/13
 * Time: 1:58 PM
 */

(function (mongoose, model, extend) {

	var self= this;
	this.callbackWithReport= function(label, f){
		return function(err, data){
			if (err)
				console.dir([
					"Call to "+label+" returned error >>",
					err
				]);
			else
				console.dir([
					"Call to "+label+" returned >>",
					data
				]);
			f(err,data);
			console.log("");

		}
	};

	//////  Relationship Category //////
	//////  Relationship Category //////
	this.saveRelationshipCategory = function(rcat, f){
		f= callbackWithReport("mongoAdapter.saveRelationshipCategory("+rcat.toString()+")",f);
			var relCat = new model.RelationshipTypeCategory(rcat);
			relCat.save( f );
	};

	this.getRelationshipCategories = function( f ){
		f= callbackWithReport("mongoAdapter.getRelationshipCategories()",f);

		model.RelationshipTypeCategory
		  .find({})
		  .exec(function(err, relCats){
			  return  (err) ? f ( err, null ) : f(null, relCats);
		  });
	};


	////////  Relationship Type ////////
	////////  Relationship Type ////////
	this.saveRelationshipType = function(rtype, f){
		f= callbackWithReport("mongoAdapter.saveRelationshipType("+ JSON.stringify( rtype)+")",f);
		var relType = new model.RelationshipType(rtype);
		relType.save( f );
	};

	this.getRelationshipType = function(rtypeId, f){
		f= callbackWithReport("mongoAdapter.getRelationshipType("+rtypeId.toString()+")",f);
		var rt  = model.RelationshipType.findOne({id: rtypeId})
		  .populate('parent')
		  .populate('category')
		  .populate('reciprocalRelationship')
		  .exec(function(err, rtype){
			  return  (err) ? f ( err, null ) : f(null, rtype);
		  })
	};

	this.getRelationshipTypes = function( f ){
		f= callbackWithReport("mongoAdapter.getRelationshipTypes()", f );
		var rt  = model.RelationshipType.find({})
		  .populate('parent')
		  .populate('category')
		  .populate('reciprocalRelationship')
		  .exec(function(err, rtypes){
			  return  (err) ? f ( err, null ) : f(null, rtypes);
		  })
	};


	//////  Item Category //////
	//////  Item Category //////
	this.saveItemCategory = function(icat, f){
		f= callbackWithReport("mongoAdapter.saveItemCategory("+JSON.stringify(icat)+")",f);
		var itemCat = new model.ItemTypeCategory(icat);
		itemCat.save( function(err, saved){
			err ? f(err) : f(null, saved);
		} );
	};

	this.getItemCategory = function(icatId, f){
		f = callbackWithReport("mongoAdapter.getItemCategory("+icatId.toString()+")",f);

		if (!icatId)
			return f("No ID.", null);

		model.ItemTypeCategory
		  .findOne({_id: (icatId)})
		  .exec(function(err, iCat){
			  return  (err) ? f ( err, null ) : f(null, iCat);
		  });
	};

	this.getItemCategories = function( f ){
		f= callbackWithReport("mongoAdapter.getItemCategories()",f);
		model.ItemTypeCategory
		  .find({})
		  .exec(function(err, iCats){
			  return  (err) ? f ( err, null ) : f(null, iCats);
		  });
	};

	//////  ItemType  //////
	//////  ItemType  //////
	this.saveItemType = function(it, f){
		f= callbackWithReport("mongoAdapter.saveItemType("+JSON.stringify(it)+")", f);

		var itemType = new model.ItemType(it);
		itemType.save( function(err, saved){
			if(err){
				return f(err,null);
			}
			getItemType(saved._id, f);//populate the stuff
		} );
	};

	this.getItemType = function(itypeId, f){
		f= callbackWithReport("mongoAdapter.getItemType("+itypeId.toString()+")",f);
		model.ItemType.findOne({_id:( itypeId)})
		  .populate('category')
		  .exec(f);
	};


	this.getItemTypes = function(f){
		f= callbackWithReport("mongoAdapter.getItemTypes()",f);
		model.ItemType.find({})
		  .populate('category')
		  .exec(f);
	};

	//////  Item  //////
	//////  Item  //////
	this.saveItem = function(itm, f){
		f= callbackWithReport("mongoAdapter.saveItem("+JSON.stringify(itm)+")",f);
		var item = new model.Item(itm);
		item.save( f );
	};

	this.getItem = function(itemId, f){
		f= callbackWithReport("mongoAdapter.getItem("+itemId.toString()+")",f);
		model.Item.findOne({id:itemId})
		  .populate('type')
		  .populate('relationships')
		  .exec(f);
	};

	//////  ViewItem  //////
	//////  ViewItem  //////
	this.getViewItem = function( vitemId, f ){
		f= callbackWithReport("mongoAdapter.getViewItem("+vitemId.toString()+")",f);
		var vi  = model.ViewItem.findOne({id: vitemId})
		  .populate('item')
		  .exec(function(err, vitem){
			  return  (err) ? f ( err, null ) : f(null, vitem);
		  })
	};

	this.saveViewItem = function( vi, f ){
		f= callbackWithReport("mongoAdapter.saveViewItem("+JSON.stringify(vi)+")",f);
		var vitem = new model.ViewItem(vi);
		vitem.save( f );
	};

	this.updateViewItemPosition = function( vitemId, x, y ,f ){
		f= callbackWithReport("mongoAdapter.updateViewItemPosition("+vitemId.toString()+","+x+","+y+")")

		getViewItem(vitemId, function(err, vitem){
			if(err)
				return f(err,null);
			vitem.position.x = x;
			vitem.position.y = y;
			return self.saveViewItem(vitem, f);
		})

	};

	//////  Context  //////
	//////  Context  //////
	this.getContext = function( context, area, f ){
		f= callbackWithReport("mongoAdapter.getContext("+context+","+area+")",f);
		model.Contexts.findOne({name: context, area: area})
		  .exec(function(err, ctxt){
			  (err) ? f ( err, null ) : f(null, ctxt);
		  })
	};

	this.saveContext = function( context, area, types, f ){
		f= callbackWithReport("mongoAdapter.saveContext("+context+","+area+","+ JSON.stringify( types ) +")",f);
		var ctxt = new model.Contexts( {name: context, area: area, types: types } );
		ctxt.save( f );
	};

	/////////// EXPORTS ////////////
	/////////// EXPORTS ////////////

	exports.saveRelationshipCategory = this.saveRelationshipCategory;
	exports.getRelationshipCategories = this.getRelationshipCategories;

	exports.saveItemCategory = this.saveItemCategory;
	exports.getItemCategory = this.getItemCategory;
	exports.getItemCategories = this.getItemCategories;

	exports.saveRelationshipType = this.saveRelationshipType;
	exports.getRelationshipType = this.getRelationshipType;
	exports.getRelationshipTypes = this.getRelationshipTypes;

	exports.saveRelationship = this.saveRelationship;
	exports.getRelationship = this.getRelationship;

	exports.saveItemType = this.saveItemType;
	exports.getItemType = this.getItemType;
	exports.getItemTypes = this.getItemTypes;

	exports.saveItem = this.saveItem;
	exports.getItem = this.getItem;

	exports.saveViewItem = this.saveViewItem;
	exports.getViewItem = this.getViewItem;
	exports.updateViewItemPosition = this.updateViewItemPosition;

	exports.saveView = this.saveView;
	exports.getView = this.getView;

	exports.getContext = this.getContext;
	exports.saveContext = this.saveContext;

})(require('mongoose'),require("./model.js"), require("xtend"));
