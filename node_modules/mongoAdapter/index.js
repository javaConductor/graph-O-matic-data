/**
 * Created with JetBrains WebStorm.
 * User: lee
 * Date: 6/20/13
 * Time: 1:58 PM
 */

(function (wu, mongoose, model, extend, logger, q) {
    var beforeSaveDefault = function (x) {
        x = x || {};
        if (x && x.id)
            x._id = x.id;
        return x;
    };
    var afterReadDefault = function (x) {
        x = x ? x.toObject() : {};
        x.id = x._id;
        return x;
    };

    var afterReadType = function(x){
        x.origin = x._origin[0];
        return x;
    };
    var beforeSaveType = function(x){
        if(x)
            x._origin = [x.origin];
        return x;
    };
    var identity = function (x) {
        return x;
    };

    var beforeSave = {
        view: function (v) {
            if (v.options)
                v.viewOptions = v.options;
            return  beforeSaveDefault(v);
        },
        item: beforeSaveDefault,
        viewItem: beforeSaveDefault,
        relationship:  beforeSaveDefault,

        category: wu.compose( beforeSaveType,beforeSaveDefault),
        itemType: wu.compose( beforeSaveType,beforeSaveDefault),
        relationshipType: wu.compose(  beforeSaveType,beforeSaveDefault),
        viewType: wu.compose(  beforeSaveType,beforeSaveDefault),

        context: identity,
        "*": identity
    };
    var afterRead = {
        view: afterReadDefault,
        item:(afterReadDefault),
        viewItem: afterReadDefault,
        relationship: afterReadDefault,
        category: wu.compose( afterReadType, afterReadDefault),
        itemType:  wu.compose( afterReadType, afterReadDefault),
        relationshipType:  wu.compose(afterReadType, afterReadDefault),
        viewType:  wu.compose( afterReadType, afterReadDefault),

        context: identity,
        "*": identity
    };

    this.debug = function (txt) {
        txt = txt || "";
        logger.debug("Debug: " + txt);
    };
    this.log = logger.debug;
    this.error = logger.error;

    var self = this;
    /*this.callbackWithReport = function (label, f) {
        return function (err, data) {
            if (err) {
                logger.error(
                    "\nCall to " + label + " returned error >>\n" + JSON.stringify(err, null, '    \n')
                );
            }
            else
                logger.debug(
                    "\nCall to " + label + " returned >>\n" +
                        JSON.stringify(data, null, '\t')
                );
            if(f)
                f(err, data);
            //self.log("");
        }
    };
*/
    //////  Category //////
    //////  Category //////
    this.saveCategory = function (rcat) {
        var d = q.defer();
        rcat = beforeSave.category(rcat);
        logger.debug("mongoAdapter.saveCategory(" + rcat + ")");
        var relCat = new model.Category(rcat);
        relCat.save(function (err, cat) {
            return  (err) ? d.reject(err) : d.resolve( afterRead.category(cat));
        });
        return d.promise;
    };

    this.getCategories = function () {
        var d = q.defer();
        model.getCategories
            .find({})
            .exec(function (err, cats) {
                return  (err) ? d.reject(err) : d.resolve( cats.map(afterRead.category));
            });
        return d.promise;
    };

    ////////  Relationship Type ////////
    ////////  Relationship Type ////////
    this.saveRelationshipType = function (rtype) {
        var d= q.defer();
        rtype = beforeSave.relationshipType(rtype);
        var relType = new model.RelationshipType(rtype);
        relType.save(function (e, rt) {
            return (e) ? d.reject(e) : d.resolve(afterRead.relationshipType(rt));
        });
        return d.promise;
    };

    this.updateRelationshipType = function (rtype) {
        var d= q.defer();
        logger.debug("mongoAdapter.updateRelationshipType(" + JSON.stringify(rtype) + ")");
        rtype = beforeSave.relationshipType(rtype);
        model.RelationshipType.findOneAndUpdate({ _id: rtype._id }, o, {new: false})
            .exec(function (err, rt) {
                return (err) ? d.reject(err) : d.resolve(afterRead.relationshipType(rt));
            });
        return d.promise;
    };

    this.getRelationshipTypeById = function (rtypeId) {
        var d = q.defer();
        var rt = model.RelationshipType.findOne({id: rtypeId})
            .exec(function (err, rtype) {
                return  (err) ? d.reject(err) : d.resolve(afterRead.relationshipType(rtype));
            });
        return d.promise;
    };

    this.getRelationshipType = function (context, area, name) {
        var d = q.defer();
        var rt = model.RelationshipType.findOne({name: name, 'origin.context': context, 'origin.area': area})
            .exec(function (err, rtype) {
                return  (err) ? d.reject(err) : d.resolve(afterRead.relationshipType(rtype));
            });
        return d.promise;
    };

    this.getRelationshipTypes = function () {
        var d = q.defer();
        var rt = model.RelationshipType.find({})
            .exec(function (err, rtypes) {
                return  (err) ? d.reject(err) : d.resolve( rtypes.map(afterRead.relationshipType));
            });
        return d.promise;
    };

    //////  Category //////
    //////  Category //////
    this.saveCategory = function (icat) {
        var d = q.defer();
        icat = beforeSave.category(icat);
        var cat = new model.Category(icat);
        cat.save(function (err, saved) {
            err ? d.reject(err) : d.resolve(afterRead.category(saved));
        });
        return d.promise;
    };

    this.getCategory = function (icatId) {
        var d= q.defer();
        if ( !icatId ){
            throw new Error("Category ID required.");
        }
        model.Category
            .findOne({_id: (icatId)})
            .exec(function (err, iCat) {
                return  (err) ? d.reject(err) : d.resolve(afterRead.category(iCat));
            });
        return d.promise;
    };

    this.getCategories = function () {
        var d = q.defer();
        model.Category
            .find({})
            .exec(function (err, iCats) {
                return  (err) ? d.reject(err) : d.resolve( iCats.map(afterRead.category));
            });
        return d.promise;
    };

    ////// ViewType  //////
    //////  ViewType  //////
    this.saveViewType = function (it) {
        var d= q.defer();
        var viewType = new model.ViewType(beforeSave.viewType(it));
        viewType.save(function (err, saved) {
                return (err) ?  d.reject(err) : d.resolve( afterRead.viewType(saved));
        });
        return d.promise;
    };

    this.getViewType = function (vtypeId) {
        var d= q.defer();
        model.Item.findOne({id: vtypeId})
            .exec(function (err, vt) {
                return (err) ? d.reject(err) : d.resolve( afterRead.viewType(vt));
            });
        return d.promise;
    };

    this.getViewTypes = function () {
        var d = q.defer();
        model.ViewType.find({})
            .exec(function (err, saved) {
                return (err) ? d.reject(err) : d.resolve( (saved || []).map(afterRead.viewType));
            });
    return d.promise;
    };

    //////  ItemType  //////
    //////  ItemType  //////
    this.saveItemType = function (it) {
        logger.debug("mongoAdapter.saveItemType(" + JSON.stringify(it) + ")");
        var d = q.defer();
        it = beforeSave.itemType(it);
        var itemType = new model.ItemType(it);
        itemType.save(function (err, saved) {
            return (err) ? d.reject(err) : d.resolve( afterRead.itemType(saved));
        });
        return d.promise;
    };

    this.updateItemType = function (itype) {
        var d = q.defer();
        logger.debug("mongoAdapter.updateItemType(" + JSON.stringify(itype) + ")");
        itype = beforeSave.itemType(itype);
        itype.save(function (err, saved) {
            return (err) ? d.reject(err) : d.resolve( afterRead.itemType(saved));
        });
        return d.promise;
    };

    this.getItemTypeById = function (itypeId) {
        var d = q.defer();
        logger.debug("mongoAdapter.getItemTypeById(" + itypeId + ")");
        model.ItemType.findOne({_id: ( itypeId)})
            .exec(function (err, it) {
                return (err) ? d.reject(err) : d.resolve(afterRead.itemType(it));
            });
        return d.promise;
    };

    this.getItemType = function (context, area, name) {
        var d = q.defer();
        logger.debug("mongoAdapter.getItemType(" + context + "." + area + "." + name + ")");
        model.ItemType.findOne({'origin.context': context, 'origin.area': area, name: name})
            .exec(function (err, itype) {
                (err) ? d.reject(err) : d.resolve(afterRead.itemType(itype));
            });
    return d.promise;
    };

    this.getItemTypeByName = function (fullTypeName) {
        logger.debug("mongoAdapter.getItemTypeByName(" + fullTypeName + ")");
        var parts = fullTypeName.split(".", 3);
        var context, area, name;
        if (parts.length == 3) {
            context = parts[0];
            area = parts[1];
            name = parts[2];
        } else {
            context = "default";
            area = "common";
            name = fullTypeName;
        }
        this.getItemType(context, area, name);
    };

    this.getItemTypes = function () {
        var d = q.defer();
        logger.debug("mongoAdapter.getItemTypes()");
        model.ItemType.find({})
            .exec(function (err, itypes) {
                (err) ? d.reject(err) : d.resolve(itypes.map(afterRead.itemType));
            });
        return d.promise;
    };

    //////  Item  //////
    //////  Item  //////
    this.saveItem = function ( itmP  ) {
        var d= q.defer();
        q.when(itmP, function(itm){
            logger.debug("mongoAdapter.saveItem(" + JSON.stringify( itm ) + ")");
            //console.log("mongoAdapter.saveItem(" + JSON.stringify( itm ) + ")");
            itm = beforeSave.item( itm );
            //logger.debug("mongoAdapter.saveItem after filter(" + JSON.stringify( itm ) + ")");
            //console.log("mongoAdapter.saveItem after filter(" + JSON.stringify( itm ) + ")");
            var item = new model.Item( itm );
            logger.debug("mongoAdapter.saveItem as modelItem(" + JSON.stringify( item ) + ")");
           // console.log("mongoAdapter.saveItem as modelItem(" + JSON.stringify( item ) + ")");
            item.save(function ( err, i ) {
                if (err) logger.error("mongoAdapter.saveItem error(" + JSON.stringify( err ) + ")");
                logger.debug("mongoAdapter.saveItem saved(" + JSON.stringify( i ) + ")");
                console.log("mongoAdapter.saveItem saved(" + JSON.stringify( i ) + ")");
                i  = afterRead.item(i);
                logger.debug("mongoAdapter.saveItem saved filtered(" + JSON.stringify( i ) + ")");
                console.log("mongoAdapter.saveItem saved filtered(" + JSON.stringify( i ) + ")");
                return (err) ? d.reject("mongoAdapter.saveItem Error:"+err) : d.resolve( i );
            });
        });
        return d.promise;
    };

    this.getItem = function (itemId) {
        var d = q.defer();
        model.Item.findOne({id: itemId})
            .populate('relationships')
            .exec(function (err, itm) {
                (err) ? d.reject(err) : d.resolve(afterRead.item(itm));
            });
        return d.promise;
    };

    this.getItems = function ( ) {
        var d = q.defer();
//        f = callbackWithReport("mongoAdapter.getItems()", f);
        model.Item.find({})
            .populate('relationships')
            .exec(function (err, itms) {
                (err) ? d.reject(err) : d.resolve(itms.map(afterRead.item));
            });
        return d.promise;
    };
    this.deleteItem = function (itemId) {
        var d= q.defer();
        model.Item.findOne({id: itemId}).remove(function(err,res){
            return (err) ? d.reject(err) : d.resolve(res);
        });
        return d.promise;
    };

    /*
     */

    function createQueryObject(searchText, searchOptions) {
        // TODO: Must add code to create the qry object for the
        // TODO: searchText and options
    }

    this.findItems = function (searchText, searchOptions) {
        var d = q.defer();
        var qry = createQueryObject(searchText, searchOptions);
        model.Item.find(qry)
            .populate('relationships')
            .exec(function (err, items) {
                (err) ? d.reject(err) : d.resolve(items.map(afterRead.itemType));
            });
        return d.promise;
    };

    //////  ViewItem  //////
    //////  ViewItem  //////
    this.getViewItem = function (vitemId) {
        var d = q.defer();
        var vi = model.ViewItem.findOne({id: vitemId})
            .populate('item')
            .exec(function (err, vitem) {
                return  (err) ? d.reject(err) : d.resolve(afterRead.viewItem(vitem));
            });
        return d.promise;
    };

    this.saveViewItem = function (vi) {
        var d = q.defer();
        vi = beforeSave.viewItem(vi);
        var vitem = new model.ViewItem(vi);
        vitem.save(function (err, vitem) {
            return  (err) ? d.reject(err) : d.resolve(afterRead.viewItem(vitem));
        });
        return d.promise;
    };

    this.createViewItem = function (viewId, itemId, x, y) {
        var d= q.defer();
        this.getItem(itemId).then( function ( i) {
            var vi = {
                viewId: viewId,
                item: i,
                position: { x: x, y: y}
            };

            var vitem = new model.ViewItem(vi);
            vitem.save(function (err, vi) {
                return  (err) ? d.reject(err) : d.resolve(afterRead.viewItem(vi));
            });
        }).catch(function(e){
                d.reject(e);
            });
        return d.promise;
    };

    this.updateViewItemPosition = function (vitemId, x, y) {
        var d= q.defer();
        getViewItem(vitemId).then( function ( vitem) {
            vitem.position.x = x;
            vitem.position.y = y;
            return self.saveViewItem(vitem, function (err, vi) {
                return  (err) ? d.reject(err) : d.resolve((vi));
            });
        })
            .catch(function(err){
                    d.reject(err);
            });
        return d.promise;
    };

    //////  Context  //////
    //////  Context  //////
    this.getContext = function (context, area) {
        var d = q.defer();
            model.Contexts.findOne({name: context, area: area})
                .exec(function (err, ctxt) {
                    (err) ? d.reject(err) : d.resolve(afterRead.context(ctxt));
                });
        return d.promise;

    };
    
    this.saveContext = function (context, area, types) {
        var d= q.defer();
//        f = callbackWithReport("mongoAdapter.saveContext(" + context + "," + area + "," + JSON.stringify(types) + ")", f);
        var ctxt = new model.Contexts({name: context, area: area, types: types });
        ctxt.save(function (err, c) {
            return  (err) ? d.reject(err) : d.resolve(afterRead.context(c));
        });
        return d.promise;
    };

    //////  View  //////
    //////  View  //////
    this.getView = function (viewId) {
        var d = q.defer();
        logger.debug("mongoAdapter.getView(" + viewId + ")");
        model.View.findOne({id: viewId})
            .populate('items')
            .populate('items.item')
            .exec(function (err, view) {
                return  (err) ? d.reject(err) : d.resolve(afterRead.view(view));
            });
        return d.promise;
    };
    
    this.getViews = function () {
        var d = q.defer();
        logger.debug("mongoAdapter.getViews()");
        model.View.find({})
            //.populate('items')
            .exec(function (err, views) {
                (err) ? d.reject(err) : d.resolve(views.map(afterRead.view));
            });
        return d.promise;
    };

    this.saveView = function (viewP) {
        var d = q.defer();
        q.when(viewP, function(view){
            logger.debug("mongoAdapter.saveView(" + JSON.stringify(view) + ")");
            var o = new model.View(beforeSave.view(view));
            o.save(function (err, v) {
                if(!err)
                    logger.debug("mongoAdapter.saveView saved(" + JSON.stringify(v) + ")");
                else
                    logger.error("mongoAdapter.saveView() Error: (" + JSON.stringify(err) + ")");
                return  (err) ? d.reject(err) : d.resolve(afterRead.view(v));
            });
        });
        return d.promise;
    };

    this.updateView = function (view ) {
        var d = q.defer();
        logger.debug("mongoAdapter.updateView(" + JSON.stringify(view) + ")");
        var o = new model.View(beforeSave.view(view));
        o.save(function (err, v) {
            return  (err) ? d.reject(err) : d.resolve(afterRead.view(v));
        });
    };

    /////////// EXPORTS ////////////
    /////////// EXPORTS ////////////

    exports.saveCategory = (this.saveCategory);
    exports.getCategory = (this.getCategory);
    exports.getCategories = (this.getCategories);

    exports.saveRelationshipType = (this.saveRelationshipType);
    exports.updateRelationshipType = (this.updateRelationshipType);
    exports.getRelationshipType = (this.getRelationshipType);
    exports.getRelationshipTypes = (this.getRelationshipTypes);
    exports.getRelationshipTypeById = (this.getRelationshipTypeById);

    exports.saveRelationship = (this.saveRelationship);;
    exports.getRelationship = (this.getRelationship);;

    exports.saveItemType =  (this.saveItemType);
    exports.getItemType = (this.getItemType);
    exports.updateItemType = (this.updateItemType);
    exports.getItemTypes = (this.getItemTypes);
    exports.getItemTypeById =  (this.getItemTypeById);
    exports.getItemTypeByName = (this.getItemTypeByName);

    exports.saveItem = (this.saveItem);
    exports.getItems = (this.getItems);
    exports.getItem = (this.getItem);
    exports.deleteItem = (this.deleteItem);

    exports.saveViewItem = (this.saveViewItem);
    exports.getViewItem = (this.getViewItem);
    exports.updateViewItemPosition = (this.updateViewItemPosition);

    exports.saveViewType = (this.saveViewType);
    exports.getViewType = (this.getViewType);
    exports.getViewTypes = (this.getViewTypes);

    exports.saveView = (this.saveView);
    exports.getView = (this.getView);
    exports.getViews = (this.getViews);
    exports.updateView = (this.updateView);

    exports.getContext = (this.getContext);
    exports.saveContext = (this.saveContext);

})(require('wu').wu, require('mongoose'),
        require("./model.js"), require("xtend"),
        require('./logger.js'),
        require('q'));
